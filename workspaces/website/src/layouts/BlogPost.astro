---
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';
import SiteWide from './SiteWide.astro';
import FormattedDate from '../components/FormattedDate.astro';

const { title, description, pubDate, updatedDate, heroImage, heroImageDesc, series, schemaType } = Astro.props;

/**
 * @todo add series after design launch
 */
async function getSeries() {
	const posts = await getCollection('blahg');
	return posts.filter((post) => ({
		params: { series },
		props: post,
	}));
}
type Props = CollectionEntry<'blahg'>['data'];

const itemtype = `https://schema.org/${schemaType}`;

let heroImgAlt = heroImageDesc;
if (!heroImgAlt) {
  heroImgAlt = `Header image for article '${title}'`
}

---

<SiteWide title={title} description={description} image={heroImage}>
	<article class="blog-post" itemscope itemtype={itemtype} itemref="scottnath">
    <header>
      {heroImage && <img width="100%" height="auto" itemprop="image" src={heroImage} alt={heroImgAlt} />}
      <h1 class="title" itemprop="headline">{title}</h1>
      <p itemprop="description">{description}</p>
      <dl class="article-dates">
        <div>
          <dt>Published</dt>
          <dd><FormattedDate date={pubDate} itemprop='datePublished' /></dd>
        </div>
        {
          updatedDate && (
          <div>
            <dt>Updated</dt>
            <dd><FormattedDate date={updatedDate} itemprop='dateModified' /></dd>
          </div>
          )
        }
      </dl>
    </header>
		<hr />
    <div class="readable" itemprop="articleBody"><slot /></div>
	</article>
</SiteWide>
